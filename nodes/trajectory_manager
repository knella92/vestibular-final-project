#!/usr/bin/env python3
'''
Keeps track of progress along trajectories and publishes new ball position targets as appropriate

PUBLISHERS:

  + target (Ball_pose)
    ~   Publishes new target values for the position of the ball.

SUBSCRIBERS

  +  ball_pose (Ball_pose)
    ~   The current position of the ball (published by vision node)

  +  rci_state (RobotState)
    ~   The current enable state of the ros_control_interface (published by ros_control_interface

SERVICES:
  
  + new_trajectory (Trajectory)
    ~   Sets new trajectory for the ball to follow

PARAMETERS

  + ~pos_tol
    ~ position tolerance for waypoint convergence

  + ~init_x
    ~ initial x target

  + ~init_y
    ~ initial y target

  + ~update_frequency
    ~ frequency to publish new targets at

  + ~x_offset
    ~ x offset between vision position and true position

  + ~y_offset
    ~ y offset between vision position and true position
'''
#imports
import rospy
from balance_board.msg import BoardPose, Ball_pose, RobotState
from balance_board.srv import Trajectory
import math
# import geometry_msgs.msg

class TrajectoryManager:
    """ Keeps track of ball trajectory
    """
    def __init__(self):
        '''
        The initiation function of trajectory_manager. Initiates subscribers and variables
        INPUTS:
            none
        OUTPUTS:
            none
        '''

        self.x_queue = []
        self.y_queue = []
        self.repeat = False
        self.wait = True
        self.pos_tol = rospy.get_param("~pos_tol")
        self.cur_x = rospy.get_param("~init_x")
        self.cur_y = rospy.get_param("~init_y")
        self.base_rate = rospy.get_param("~update_frequency")
        self.x_off = rospy.get_param("~x_offset")
        self.y_off = rospy.get_param("~y_offset")
        self.period = 0
        self.converged = False
        self.rci_state= False

        # inits publishers, subscribers services
        self.vision_system = rospy.Subscriber("ball_pose", Ball_pose, self.vision_callback)
        self.target = rospy.Publisher('target', Ball_pose)
        self.service = rospy.Service("new_trajectory", Trajectory, self.set_trajectory_callback)
        self.robot_state = rospy.Subscriber("rci_state", RobotState, self.rci_state_callback)
        self.timer = rospy.Timer(rospy.Duration(secs=1/self.base_rate), self.send_target_callback)
        self.start_time = rospy.Time.now().to_sec()


    def vision_callback(self, msg):
        '''
        Checks whether ball has converged to current waypoint

        INPUTS:
            msg (Ball_pose) ~ current ball position
        OUTPUTS:
            none
        '''

        if math.sqrt((msg.x-self.cur_x)**2 + (msg.y-self.cur_y)**2) < self.pos_tol:
            self.converged = True
        else:
            self.converged = False
    
    def set_trajectory_callback(self, msg):
        '''
        Sets new Trajectory

        INPUTS:
            msg (Trajectory) ~ new trajectory to follow
        OUTPUTS:
            is_ok (True  ) ~ Responds whether trajectory was valid
        '''

        # checks if trajectory is valid
        if not len(msg.x_list) == len(msg.y_list):
            return False 

        # checks of new trajectory should clear old trajectory
        if msg.clear_queue:
            self.x_queue = [*msg.x_list]
            self.y_queue = [*msg.y_list]
            self.repeat = msg.repeat

            # checks if new trajectory should wait for each waypoint to converge or publish new waypoints at a set rate
            if msg.rate == 0:
                self.wait = True
            else:
                self.period = 1/msg.rate
                self.wait = False
        else:
            self.x_queue = self.x_queue+[*msg.x_list]
            self.y_queue = self.y_queue+[*msg.y_list]
            
        return True

    def send_target_callback(self, msg):
        '''
        Sends new position target from queue

        INPUTS:
            msg (unused)
        OUTPUTS:
            none
        '''
        time = rospy.Time.now().to_sec()
        new_target = Ball_pose()

        # if waypoint has converged or period exceeded, sends new waypoint. otherwise resends most recent waypoint
        if ((self.converged and self.wait) or (time - self.start_time > self.period)) and len(self.x_queue) > 0 and self.rci_state:
            new_x = self.x_queue.pop(0)
            new_y = self.y_queue.pop(0)

            if self.repeat:
                self.x_queue.append(new_x)
                self.y_queue.append(new_y)
            self.cur_x = new_x
            self.cur_y = new_y
            self.start_time = time

        new_target.x_way = self.cur_x + self.x_off
        new_target.y_way = self.cur_y + self.y_off
        self.target.publish(new_target)

    def rci_state_callback(self, msg):
        '''
        Reads in robot enabling state

        INPUTS:
            msg (RobotState) ~ current robot state
        OUTPUTS:
            none
        '''
        self.rci_state = msg.state
        

        


def main():
    
    rospy.init_node('trajectory_manager', anonymous=True)
    trajmgr = TrajectoryManager()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass